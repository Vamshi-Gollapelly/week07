# week07/.github/workflows/backend_ci.yml

name: Backend CI - Test, Build and Push Images to ACR

# Triggers:
# - Manual via "Run workflow"
# - Pushes to main when backend paths (or this file) change
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

# Global env mapped from your GitHub repo secrets (you already created these)
env:
  ACR_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}   # e.g. sit722acr235906.azurecr.io
  ACR_USERNAME:     ${{ secrets.REGISTRY_USERNAME }}       # e.g. sit722acr235906
  ACR_PASSWORD:     ${{ secrets.REGISTRY_PASSWORD }}       # the long password you printed earlier
  IMAGE_TAG:        ${{ github.sha }}-${{ github.run_id }} # unique, traceable tag

jobs:
  # ---------------------------
  # Job 1: Test & (optional) lint
  # ---------------------------
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -V
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx flake8

      - name: Lint (non-blocking)
        continue-on-error: true
        run: |
          flake8 backend/product_service || true
          flake8 backend/order_service  || true

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

  # --------------------------------------
  # Job 2: Build & Push Images to your ACR
  # --------------------------------------
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show Docker info (debug)
        run: docker info

      - name: Docker login to ACR
        run: |
          echo "${ACR_PASSWORD}" | docker login "${ACR_LOGIN_SERVER}" -u "${ACR_USERNAME}" --password-stdin

      - name: Build and push Product Service (latest + IMAGE_TAG)
        run: |
          docker build -t "${{ env.ACR_LOGIN_SERVER }}/product_service:latest" ./backend/product_service/
          docker push "${{ env.ACR_LOGIN_SERVER }}/product_service:latest"
          docker tag  "${{ env.ACR_LOGIN_SERVER }}/product_service:latest" "${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}"
          docker push "${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}"

      - name: Build and push Order Service (latest + IMAGE_TAG)
        run: |
          docker build -t "${{ env.ACR_LOGIN_SERVER }}/order_service:latest" ./backend/order_service/
          docker push "${{ env.ACR_LOGIN_SERVER }}/order_service:latest"
          docker tag  "${{ env.ACR_LOGIN_SERVER }}/order_service:latest" "${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}"
          docker push "${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}"

      - name: Logout from registry
        if: always()
        run: docker logout "${ACR_LOGIN_SERVER}"
